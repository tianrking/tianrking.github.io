"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9818],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),o=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=o(r),m=a,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return r?n.createElement(g,p(p({ref:t},c),{},{components:r})):n.createElement(g,p({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,p=new Array(s);p[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var o=2;o<s;o++)p[o]=r[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3051:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var n=r(7462),a=(r(7294),r(3905));const s={description:"ESP32 Setting up Development Environment",title:"ESP32 Getting started",tags:["embedded","esp"],keywords:["embedded","esp"],image:"https://github.com/tianrking.png",last_update:{date:"12/2/2022",author:"w0x7ce"}},p=void 0,l={unversionedId:"esp/esp32c3-dev-get-start",id:"esp/esp32c3-dev-get-start",title:"ESP32 Getting started",description:"ESP32 Setting up Development Environment",source:"@site/docs/esp/esp32c3-dev-get-start.md",sourceDirName:"esp",slug:"/esp/esp32c3-dev-get-start",permalink:"/esp/esp32c3-dev-get-start",draft:!1,editUrl:"https://github.com/tianrking/tianrking.github.io/edit/v3.0/docs/esp/esp32c3-dev-get-start.md",tags:[{label:"embedded",permalink:"/tags/embedded"},{label:"esp",permalink:"/tags/esp"}],version:"current",lastUpdatedBy:"w0x7ce",lastUpdatedAt:1669939200,formattedLastUpdatedAt:"Dec 2, 2022",frontMatter:{description:"ESP32 Setting up Development Environment",title:"ESP32 Getting started",tags:["embedded","esp"],keywords:["embedded","esp"],image:"https://github.com/tianrking.png",last_update:{date:"12/2/2022",author:"w0x7ce"}},sidebar:"tutorialSidebar",previous:{title:"Tutorial Intro",permalink:"/intro"},next:{title:"FreeRTOS on RP2040 Getting started",permalink:"/rp2040/freeRTOS-on-RP2040-get-start"}},i={},o=[{value:"Step 1. Install Prerequisites",id:"step-1-install-prerequisites",level:2}],c={toc:o};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"step-1-install-prerequisites"},"Step 1. Install Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ubuntu & Debian ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install git wget flex bison gperf python3 python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/esp/esp-idf\n./install.sh esp32\n./install.sh esp32,esp32s2\n. ./export.sh\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'cd ~/esp/esp-idf\nexport IDF_GITHUB_ASSETS="dl.espressif.com/github_assets"\n./install.sh\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},". $HOME/esp/esp-idf/export.sh\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"alias get_idf='. $HOME/esp/esp-idf/export.sh'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/esp\ncp -r $IDF_PATH/examples/get-started/hello_world .\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export IDF_PATH=~/esp/esp-idf\ncd ~/esp\ncp -r $IDF_PATH/examples/get-started/hello_world .\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/esp/hello_world\nidf.py set-target esp32\nidf.py menuconfig\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"idf.py build\nidf.py flash\n")))}d.isMDXComponent=!0}}]);