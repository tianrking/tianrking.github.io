"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6215],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={description:"Get_Start_With_Nano",title:"Get_Start_With_Nano",tags:["embedded","nano","jetson","ros2"],keywords:["embedded","nano","jetson","ros2"],image:"https://github.com/tianrking.png",last_update:{date:"12/9/2022",author:"w0x7ce"}},o=void 0,s={unversionedId:"Jetson/Get_Start_With_Nano",id:"Jetson/Get_Start_With_Nano",title:"Get_Start_With_Nano",description:"Get_Start_With_Nano",source:"@site/docs/Jetson/Get_Start_With_Nano.md",sourceDirName:"Jetson",slug:"/Jetson/Get_Start_With_Nano",permalink:"/Jetson/Get_Start_With_Nano",draft:!1,editUrl:"https://github.com/tianrking/tianrking.github.io/edit/v3.0/docs/Jetson/Get_Start_With_Nano.md",tags:[{label:"embedded",permalink:"/tags/embedded"},{label:"nano",permalink:"/tags/nano"},{label:"jetson",permalink:"/tags/jetson"},{label:"ros2",permalink:"/tags/ros-2"}],version:"current",lastUpdatedBy:"w0x7ce",lastUpdatedAt:1670544e3,formattedLastUpdatedAt:"Dec 9, 2022",frontMatter:{description:"Get_Start_With_Nano",title:"Get_Start_With_Nano",tags:["embedded","nano","jetson","ros2"],keywords:["embedded","nano","jetson","ros2"],image:"https://github.com/tianrking.png",last_update:{date:"12/9/2022",author:"w0x7ce"}},sidebar:"tutorialSidebar",previous:{title:"Python Pyside6 \u5feb\u901f\u5b9e\u73b0ROS2\u4e0a\u4f4d\u673a\u5f00\u53d1",permalink:"/ROS/ROS_GUI_Dev_PySide6"}},l={},p=[{value:"GPIO",id:"gpio",level:3},{value:"UART",id:"uart",level:3},{value:"I2C",id:"i2c",level:3},{value:"smbus python IIC",id:"smbus-python-iic",level:4},{value:"I2Ctool",id:"i2ctool",level:4},{value:"Camera",id:"camera",level:3},{value:"Gstreamer",id:"gstreamer",level:4},{value:"Jetcam",id:"jetcam",level:4}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"gpio"},"GPIO"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/NVIDIA/jetson-gpio.git"},"Jetson-GPIO")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pip install Jetson.GPIO\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import Jetson.GPIO as GPIO\nimport time as time\n# \u5bfc\u5165\u76f8\u5173\u5e93\n\nLED_Pin = 11\nGPIO.setmode(GPIO.BOARD)\nGPIO.setup(LED_Pin, GPIO.OUT)\n# \u8bbe\u7f6e\u76ee\u6807\u5f15\u811a\u53ca\u6a21\u5f0f\n\nwhile (True):\n   GPIO.output(LED_Pin, GPIO.HIGH)\n   time.sleep(2)\n   GPIO.output(LED_Pin, GPIO.LOW)\n   time.sleep(2)\n # \u4e3b\u5faa\u73af\n\nGPIO.cleanup()\n#\u6e05\u9664GPIO\u7684\u72b6\u6001\n")),(0,r.kt)("h3",{id:"uart"},"UART"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install python3-serial\n\nsudo chmod 777 /dev/ttyTHS1\n# \u5f00\u542f\u4e32\u53e3\u6743\u9650,\u5173\u673a\u540e\u8be5\u6743\u9650\u4e5f\u5c06\u88ab\u5173\u95ed\uff0c\u4e0b\u6b21\u4f7f\u7528\u4e32\u53e3\u524d\u9700\u518d\u6b21\u91cd\u65b0\u5f00\u542f\uff1b\n\ngit clone https://github.com/JetsonHacksNano/UARTDemo\n# \u83b7\u53d6\u4e32\u53e3\u901a\u8baf\u6d4b\u8bd5\u6848\u4f8b\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Jetson Nano\u5f15\u811a8\uff08TXD\uff09 \u2192USB\u8f6cTTL\u6a21\u5757RX\nJetson Nano \u5f15\u811a10\uff08RXD\uff09 \u2192USB\u8f6cTTL\u6a21\u5757TX\nJetson Nano J\u5f15\u811a6\uff08GND\uff09 \u2192USB\u8f6cTTL\u6a21\u5757GN\n#Jetson Nano J\u5f15\u811a2\uff085V\uff09 \u2192USB\u8f6cTTL\u6a21\u5757VCC  \u8be5\u5f15\u811a\u53ef\u4e0d\u63a5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#\uff01 /usr/bin/python3\nimport time\nimport serial\n#\u5bfc\u5165serial\u5e93\n\nserial_port = serial.Serial(\n    port="/dev/ttyTHS1",\n    baudrate=115200,\n    bytesize=serial.EIGHTBITS,\n    parity=serial.PARITY_NONE,\n    stopbits=serial.STOPBITS_ONE,\n)\ntime.sleep(1)\n# \u4e32\u53e3\u914d\u7f6e\u4fe1\u606f\n# \u6ce2\u7279\u7387115200\uff0c8\u4f4d\u6570\u636e\u4f4d\uff0c\u65e0\u5947\u5076\u6821\u9a8c\u4f4d\uff0c1\u4f4d\u505c\u6b62\u4f4d\n\ntry:\n    serial_port.write("UART Demonstration Program\\r\\n".encode())\n    serial_port.write("NVIDIA Jetson Nano Developer Kit\\r\\n".encode())\n    while True:\n        if serial_port.inWaiting() > 0:\n            data = serial_port.read()\n            print(data)\n            serial_port.write(data)\n            if data == "\\r".encode():\n                serial_port.write("\\n".encode())\n\nexcept KeyboardInterrupt:\n    print("Exiting Program")\n\nexcept Exception as exception_error:\n    print("Error occurred. Exiting Program")\n    print("Error: " + str(exception_error))\n\nfinally:\n    serial_port.close()\n    pass\n')),(0,r.kt)("h3",{id:"i2c"},"I2C"),(0,r.kt)("h4",{id:"smbus-python-iic"},"smbus python IIC"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install -y python3-smbus\nsudo usermod -aG i2c <\u7528\u6237\u540d>               #\u6dfb\u52a0\u7528\u6237\u7ec4\nsudo reboot                                #\u91cd\u542f\n")),(0,r.kt)("h4",{id:"i2ctool"},"I2Ctool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install -y i2c-tools           #\u4e0b\u8f7dI2Ctool\napt-cache policy i2c-tools                  #\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f\n\nsudo i2cdetect -y -r -a 1\n")),(0,r.kt)("h3",{id:"camera"},"Camera"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo apt install v4l-utils\nls /dev/video*\nv4l2-ctl --device=/dev/video0 --list-formats-ext\n")),(0,r.kt)("h4",{id:"gstreamer"},"Gstreamer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo add-apt-repository universe\nsudo add-apt-repository multiverse\nsudo apt-get update\nsudo apt-get install gstreamer1.0-tools gstreamer1.0-alsa gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav\nsudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import CV2\n\n# \u8bbe\u7f6egstreamer\u7ba1\u9053\u53c2\u6570\ndef gstreamer_pipeline(\n    capture_width=1280, #\u6444\u50cf\u5934\u9884\u6355\u83b7\u7684\u56fe\u50cf\u5bbd\u5ea6\n    capture_height=720, #\u6444\u50cf\u5934\u9884\u6355\u83b7\u7684\u56fe\u50cf\u9ad8\u5ea6\n    display_width=1280, #\u7a97\u53e3\u663e\u793a\u7684\u56fe\u50cf\u5bbd\u5ea6\n    display_height=720, #\u7a97\u53e3\u663e\u793a\u7684\u56fe\u50cf\u9ad8\u5ea6\n    framerate=60,       #\u6355\u83b7\u5e27\u7387\n    flip_method=0,      #\u662f\u5426\u65cb\u8f6c\u56fe\u50cf\n):\n    return (\n        "nvarguscamerasrc ! "\n        "video/x-raw(memory:NVMM), "\n        "width=(int)%d, height=(int)%d, "\n        "format=(string)NV12, framerate=(fraction)%d/1 ! "\n        "nvvidconv flip-method=%d ! "\n        "video/x-raw, width=(int)%d, height=(int)%d, format=(string)BGRx ! "\n        "videoconvert ! "\n        "video/x-raw, format=(string)BGR ! appsink"\n        % (\n            capture_width,\n            capture_height,\n            framerate,\n            flip_method,\n            display_width,\n            display_height,\n        )\n    )\n\nif __name__ == "__main__":\n    capture_width = 1280\n    capture_height = 720\n\n    display_width = 1280\n    display_height = 720\n\n    framerate = 60          # \u5e27\u6570\n    flip_method = 0         # \u65b9\u5411\n\n    # \u521b\u5efa\u7ba1\u9053\n    print(gstreamer_pipeline(capture_width,capture_height,display_width,display_height,framerate,flip_method))\n\n    #\u7ba1\u9053\u4e0e\u89c6\u9891\u6d41\u7ed1\u5b9a\n    cap = CV2.VideoCapture(gstreamer_pipeline(flip_method=0), CV2.CAP_GSTREAMER)\n\n    if cap.isOpened():\n        window_handle = CV2.namedWindow("CSI Camera", CV2.WINDOW_AUTOSIZE)\n\n        # \u9010\u5e27\u663e\u793a\n        while CV2.getWindowProperty("CSI Camera", 0) >= 0:\n            ret_val, img = cap.read()\n            CV2.imshow("CSI Camera", img)\n\n            keyCode = CV2.waitKey(30) & 0xFF\n            if keyCode == 27:# ESC\u952e\u9000\u51fa\n                break\n\n        cap.release()\n        CV2.destroyAllWindows()\n    else:\n        print("\u6253\u5f00\u6444\u50cf\u5934\u5931\u8d25")\n\n')),(0,r.kt)("h4",{id:"jetcam"},"Jetcam"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install traitlets==4.3.3\npip3 install traitlets\ngit clone https://github.com/NVIDIA-AI-IOT/jetcam\ncd jetcam\nsudo python3 setup.py install\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from jetcam.csi_camera import CSICamera\nimport CV2\n\n#CSI-0\ncamera0 = CSICamera(capture_device=0, width=224, height=224)\nimage0 = camera0.read()\nprint(image0.shape)\nprint(camera0.value.shape)\n\n#CSI-1\n#camera1 = CSICamera(capture_device=1, width=224, height=224)\n#image1 = camera1.read()\n#print(image1.shape)\n#print(camera1.value.shape)\n\nwhile 1:\n    image0 = camera0.read()\n    CV2.imshow("CSI Camera0", image0)\n\n    #image1 = camera1.read()\n    #CV2.imshow("CSI Camera1", image1)\n\n    kk = CV2.waitKey(1)\n    if kk == ord(\'q\'):                          #\u6309\u4e0bq\u952e,\u9000\u51fa\n        break\n\n')))}m.isMDXComponent=!0}}]);